<?php

class Video
{

}

class User
{
	public function download(Video $video)
	{
		if(! this->subscribed()){
			throw new Exception('You must be subscribed to download videos.');
		}
	}

	public function subscribed()
	{
		return false;
	}
}

class UserDownloaddsController
{
	public function show()
	{
		(new User)->download(new Video); // Generic Exception
	}
}





class MaximumMembersReachedException extends Exception
{
	protected $message = 'You may not add more than 3 team members';
	// Only if a very specific part of business logic is possibly broken,
	// create custom exception.
	// You can throw custom exceptions in multiple places, so reduce repeating messages by:
	// 1. storing in variables, or
	// 2. static constructor

	public static function fromTooManyMembers()
	{
		return new static('Generic Exception');
		// called by: throw class::fromTooManyMembers();
	}
}
// Or, use a more generic Team exception and handle within that

class Member
{
	public $name;

	public function __construct($name)
	{
		$this->name = $name;
	}
}

class Team
{
	protected $members = [];

	public function add(Member $member)
	{
		if(count($this->members) == 3)
		{
			throw new MaximumMembersReachedException;
		}
		$this->members[] = $member;
	}

	public function members()
	{
		return $this->members;
	}
}

class TeamMembersController
{
	public function store()
	{
		$team = new Team(); // has a maximum of 3 members

		try {
			$team->add(new Member('Jane'));
			$team->add(new Member('John'));
			$team->add(new Member('Frank'));
			$team->add(new Member('Susan'));
	
			var_dump($team->members());
		} catch(MaximumMembersReachedException $e) {
			var_dump($e);
		} // More catches allowed
	}
}

(new TeamMembersController())->store();